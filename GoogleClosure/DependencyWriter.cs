using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace GoogleClosure
{
    /// <summary>
    /// A class that knows how to write a <code>deps</code> file given a 
    /// set of dependency-analyzed source files.
    /// </summary>
    public class DependencyWriter : IDisposable
    {
        private readonly FileStream _stream;
        private readonly StreamWriter _writer;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="path"><code>deps</code> file</param>
        public DependencyWriter(string path)
        {
            _stream = new FileStream(path, FileMode.Create, FileAccess.ReadWrite, FileShare.Read);
            
            _writer = new StreamWriter(_stream);
            _writer.WriteLine("// This file was autogenerated by '{0}'", GetApplicationName());
            _writer.WriteLine("// Please do not edit.");
        }

        private static string GetApplicationName()
        {
            return Path.GetFileName(System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName);
        }

        public static void WriteDependencies(string path, SortedDictionary<string, IAnalyzedSourceFile> dependencies)
        {
            using(var writer = new DependencyWriter(path))
            {
                writer.WriteDependencies(dependencies);
            }
        }

        /// <summary>
        /// Write given dependencies to file.
        /// </summary>
        /// <param name="dependencies"></param>
        public void WriteDependencies(SortedDictionary<string, IAnalyzedSourceFile> dependencies)
        {
            foreach (var entry in dependencies.Where(entry => entry.Value.Provided.Count > 0))
            {
                _writer.WriteLine("goog.addDependency('{0}', [{1}], [{2}]);",
                                  entry.Key,
                                  String.Join(", ", entry.Value.Provided.Select(x => "'" + x + "'")),
                                  String.Join(", ", entry.Value.Required.Select(x => "'" + x + "'")));
            }
        }

        public void Dispose()
        {
            Dispose(true);
        }

        protected virtual void Dispose(bool disposing)
        {
            if(!disposing) return;
            
            if (_writer != null)
            {
                _writer.Flush();
                _writer.Dispose();
            }

            if (_stream != null)
            {
                _stream.Dispose();
            }
        }
    }
}
